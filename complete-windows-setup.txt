# ==========================================
# AI Reporting Chatbot - COMPLETE Windows Setup Script with ALL Code
# Run: powershell -ExecutionPolicy Bypass -File setup-complete-project.ps1
# ==========================================

$ErrorActionPreference = 'Stop'
Set-Location -Path $PSScriptRoot

Write-Host "Setting up AI Reporting Chatbot with COMPLETE implementation..." -ForegroundColor Green

# Create directory structure
Write-Host "Creating directory structure..." -ForegroundColor Yellow

$directories = @(
    "src\app\api\auth\check",
    "src\app\api\auth\login", 
    "src\app\api\auth\logout",
    "src\app\api\companies",
    "src\app\api\generate-report",
    "src\app\api\parse-file",
    "src\app\api\reports\[id]",
    "src\components",
    "src\lib",
    "src\store",
    "src\types",
    "prisma",
    "public"
)

foreach ($dir in $directories) {
    New-Item -ItemType Directory -Force -Path $dir | Out-Null
}

# ==========================================
# FILE CONTENTS (all closers 'at' on their own lines)
# ==========================================

# ---- src/components/ReportingChatbot.tsx
$ReportingChatbot = @'
'use client';

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { 
  Upload, Send, RotateCcw, Building2, FileText, X, ChevronDown, 
  Loader2, BarChart3, AlertCircle, Save, Check, Edit2, Eye 
} from 'lucide-react';
import { useChatStore } from '@/store/chat-store';
import type { Report } from '@/types';

// Chart Renderer Component
const ChartRenderer: React.FC<{ chart: any }> = ({ chart }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');
    if (!ctx) return;
    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
    const width = canvasRef.current.width;
    const height = canvasRef.current.height;
    const barWidth = width / chart.data.labels.length;
    chart.data.datasets[0].data.forEach((value: number, index: number) => {
      const max = Math.max(...chart.data.datasets[0].data);
      const barHeight = (value / (max || 1)) * (height - 40);
      ctx.fillStyle = '#3B82F6';
      ctx.fillRect(index * barWidth + 10, height - barHeight - 20, barWidth - 20, barHeight);
      ctx.fillStyle = '#000';
      ctx.font = '10px sans-serif';
      ctx.fillText(chart.data.labels[index], index * barWidth + barWidth / 2 - 10, height - 5);
    });
  }, [chart]);
  return (
    <div className="w-full h-64 mb-4 border rounded p-2">
      <canvas ref={canvasRef} width={600} height={250} className="w-full h-full" />
    </div>
  );
};

// Simple Editor Component
const SimpleEditor: React.FC<{
  content: string;
  isEditing: boolean;
  onSave: (content: string) => void;
  onEdit: () => void;
}> = ({ content, isEditing, onSave, onEdit }) => {
  const [editedContent, setEditedContent] = useState(content);
  useEffect(() => { setEditedContent(content); }, [content]);
  const handleSave = () => onSave(editedContent);
  return (
    <div className="h-full flex flex-col">
      <div className="border-b p-2 flex justify-between items-center bg-gray-50">
        <h3 className="font-semibold">Report Editor</h3>
        <div className="flex gap-2">
          {!isEditing ? (
            <button onClick={onEdit} className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700">
              <Edit2 className="w-4 h-4" /> Edit
            </button>
          ) : (
            <>
              <button onClick={handleSave} className="flex items-center gap-1 px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700">
                <Save className="w-4 h-4" /> Save
              </button>
              <button onClick={() => onEdit()} className="flex items-center gap-1 px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700">
                <Eye className="w-4 h-4" /> View
              </button>
            </>
          )}
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-4">
        {isEditing ? (
          <textarea value={editedContent} onChange={(e) => setEditedContent(e.target.value)} className="w-full h-full p-4 border rounded font-mono text-sm" />
        ) : (
          <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: editedContent }} />
        )}
      </div>
    </div>
  );
};

// File Upload Component
const FileUploadZone: React.FC = () => {
  const { uploadedFiles, uploadFile, removeFile } = useChatStore();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragging, setIsDragging] = useState(false);
  const handleFiles = useCallback((files: FileList) => {
    Array.from(files).forEach(file => {
      const validTypes = ['application/pdf', 'text/csv', 'text/plain',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!validTypes.includes(file.type) && !file.name.match(/\.(pdf|csv|txt|xlsx|docx)$/i)) { console.error('Invalid file type:', file.name); return; }
      if (file.size > 10 * 1024 * 1024) { console.error('File too large:', file.name); return; }
      uploadFile(file);
    });
  }, [uploadFile]);
  const handleDrop = useCallback((e: React.DragEvent) => { e.preventDefault(); setIsDragging(false); handleFiles(e.dataTransfer.files); }, [handleFiles]);
  const handleDragOver = useCallback((e: React.DragEvent) => { e.preventDefault(); setIsDragging(true); }, []);
  const handleDragLeave = useCallback(() => setIsDragging(false), []);
  return (
    <div className={`border-2 border-dashed rounded-lg p-4 transition-colors ${isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
      onDrop={handleDrop} onDragOver={handleDragOver} onDragLeave={handleDragLeave}>
      <input ref={fileInputRef} type="file" multiple accept=".pdf,.csv,.txt,.xlsx,.docx"
        onChange={(e) => e.target.files && handleFiles(e.target.files)} className="hidden" />
      {uploadedFiles.length > 0 ? (
        <div className="space-y-2">
          {uploadedFiles.map(file => (
            <div key={file.id} className="flex items-center justify-between bg-white p-2 rounded border">
              <div className="flex items-center gap-2 flex-1">
                <FileText className="w-4 h-4 text-gray-500" />
                <span className="text-sm truncate">{file.name}</span>
                <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(1)} KB)</span>
                {file.status === 'uploading' && (<><Loader2 className="w-3 h-3 animate-spin text-blue-500" /><span className="text-xs text-blue-500">{file.progress?.toFixed(0)}%</span></>)}
                {file.status === 'ready' && <Check className="w-4 h-4 text-green-500" />}
                {file.status === 'error' && (<span className="text-xs text-red-500" title={file.error}>Error</span>)}
              </div>
              <button onClick={() => removeFile(file.id)} className="p-1 hover:bg-gray-100 rounded" disabled={file.status === 'uploading'}>
                <X className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      ) : (
        <button onClick={() => fileInputRef.current?.click()} className="w-full py-4 text-center text-gray-500 hover:text-gray-700">
          <Upload className="w-8 h-8 mx-auto mb-2" />
          <p className="text-sm">Drop files or click to upload</p>
          <p className="text-xs">PDF, Word, Excel, CSV, TXT (Max 10MB)</p>
        </button>
      )}
    </div>
  );
};

// Login Component
const LoginForm: React.FC = () => {
  const { login, isLoading, error } = useChatStore();
  const [email, setEmail] = useState('demo@example.com');
  const [password, setPassword] = useState('demo');
  const handleLogin = () => { login(email, password); };
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
        <h2 className="text-2xl font-bold mb-6">Login to AI Report Generator</h2>
        <div>
          <input type="email" placeholder="Email" className="w-full px-4 py-2 border rounded mb-4" value={email} onChange={(e) => setEmail(e.target.value)} />
          <input type="password" placeholder="Password" className="w-full px-4 py-2 border rounded mb-4" value={password} onChange={(e) => setPassword(e.target.value)}
            onKeyDown={(e) => { if (e.key === 'Enter') handleLogin(); }} />
          <button onClick={handleLogin} className="w-full py-2 bg-blue-600 text-white rounded hover:bg-blue-700" disabled={isLoading}>
            {isLoading ? 'Logging in...' : 'Login'}
          </button>
          {error && <p className="text-red-500 mt-2">{error}</p>}
        </div>
      </div>
    </div>
  );
};

// Main Component
export default function ReportingChatbot() {
  const {
    messages, currentReport, selectedCompany, companies, isLoading, error,
    isAuthenticated, setCompany, sendMessage, clearChat, saveReport, loadCompanies, checkAuth, setReport,
  } = useChatStore();
  const [inputValue, setInputValue] = useState('');
  const [includeGraphs, setIncludeGraphs] = useState(false);
  const [showCompanyDropdown, setShowCompanyDropdown] = useState(false);
  const [isEditingReport, setIsEditingReport] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => { checkAuth(); }, [checkAuth]);
  useEffect(() => { if (isAuthenticated && companies.length === 0) loadCompanies(); }, [isAuthenticated, companies.length, loadCompanies]);
  useEffect(() => { chatEndRef.current?.scrollIntoView({ behavior: 'smooth' }); }, [messages]);

  const handleSendMessage = useCallback(async () => {
    if (!inputValue.trim()) return;
    await sendMessage(inputValue, includeGraphs);
    setInputValue('');
  }, [inputValue, includeGraphs, sendMessage]);

  const handleSaveReport = useCallback(async (content: string) => {
    if (currentReport) {
      await saveReport(currentReport.id, content);
      setIsEditingReport(false);
    }
  }, [currentReport, saveReport]);

  if (!isAuthenticated) return <LoginForm />;

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      <header className="bg-white border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <BarChart3 className="w-8 h-8 text-blue-600" />
            <h1 className="text-xl font-semibold">AI Report Generator</h1>
          </div>
          <div className="flex items-center gap-4">
            <div className="relative">
              <button onClick={() => setShowCompanyDropdown(!showCompanyDropdown)} className="flex items-center gap-2 px-4 py-2 border rounded-lg hover:bg-gray-50">
                <Building2 className="w-4 h-4" />
                <span>{selectedCompany?.name || 'Select Company'}</span>
                <ChevronDown className="w-4 h-4" />
              </button>
              {showCompanyDropdown && (
                <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border z-50">
                  {companies.map(company => (
                    <button key={company.id} onClick={() => { setCompany(company); setShowCompanyDropdown(false); }} className="w-full text-left px-4 py-2 hover:bg-gray-50">
                      <div className="font-medium">{company.name}</div>
                      {company.context && (<div className="text-xs text-gray-500">{company.context}</div>)}
                    </button>
                  ))}
                </div>
              )}
            </div>
            <button onClick={() => { if (confirm('Clear all chat history?')) clearChat(); }}
              className="flex items-center gap-2 px-4 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100">
              <RotateCcw className="w-4 h-4" /> Clear
            </button>
          </div>
        </div>
      </header>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 m-4">
          <div className="flex items-start">
            <AlertCircle className="w-5 h-5 text-red-500 mt-0.5" />
            <div className="ml-3"><p className="text-sm text-red-800">{error}</p></div>
          </div>
        </div>
      )}

      <div className="flex flex-1 overflow-hidden">
        <div className={`${currentReport ? 'w-1/2' : 'flex-1'} flex flex-col bg-white`}>
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.length === 0 && (
              <div className="text-center py-12 text-gray-500">
                <BarChart3 className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                <p className="text-lg font-medium">Start by selecting a company</p>
                <p className="text-sm mt-2">Upload files and ask questions to generate reports</p>
              </div>
            )}
            {messages.map(message => (
              <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-2xl px-4 py-3 rounded-lg ${
                    message.type === 'user' ? 'bg-blue-600 text-white' :
                    message.type === 'assistant' ? 'bg-gray-100 text-gray-900' :
                    message.type === 'error' ? 'bg-red-50 text-red-800 border border-red-200' :
                    'bg-yellow-50 text-yellow-800'}`}>
                  {message.files && message.files.length > 0 && (
                    <div className="mb-2 space-y-1">
                      {message.files.map(file => (
                        <div key={file.id} className="flex items-center gap-2 text-sm opacity-90">
                          <FileText className="w-4 h-4" /><span>{file.name}</span>
                        </div>
                      ))}
                    </div>
                  )}
                  {message.type === 'assistant' ? (
                    <div>
                      <div className="line-clamp-3" dangerouslySetInnerHTML={{ __html: message.content.substring(0, 200) + '...' }} />
                      {message.reportId && (
                        <button onClick={() => {
                            const report: Report = {
                              id: message.reportId!, content: message.content, charts: message.charts,
                              query: '', timestamp: message.timestamp,
                            }; setReport(report);
                          }} className="text-xs mt-2 underline opacity-70 hover:opacity-100">
                          View full report →
                        </button>
                      )}
                    </div>
                  ) : (<div>{message.content}</div>)}
                  {message.charts && message.charts.map(chart => (<ChartRenderer key={chart.id} chart={chart} />))}
                  <div className="text-xs mt-2 opacity-70">{new Date(message.timestamp).toLocaleTimeString()}</div>
                </div>
              </div>
            ))}
            <div ref={chatEndRef} />
          </div>

          <div className="border-t p-4 bg-gray-50">
            <FileUploadZone />
            <div className="mt-4 flex items-center gap-3">
              <label className="flex items-center gap-2 cursor-pointer">
                <input type="checkbox" checked={includeGraphs} onChange={(e) => setIncludeGraphs(e.target.checked)} className="w-4 h-4 text-blue-600 rounded" />
                <span className="text-sm font-medium">Include graphs</span>
              </label>
            </div>
            <div className="mt-4 flex gap-2">
              <textarea value={inputValue} onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); } }}
                placeholder="Type your reporting query..." className="flex-1 px-4 py-2 border rounded-lg resize-none" rows={2} disabled={isLoading} />
              <button onClick={handleSendMessage} disabled={isLoading || !inputValue.trim()}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50">
                {isLoading ? <Loader2 className="w-5 h-5 animate-spin" /> : <Send className="w-5 h-5" />}
              </button>
            </div>
          </div>
        </div>

        {currentReport && (
          <div className="w-1/2 border-l bg-white">
            <SimpleEditor content={currentReport.editedContent || currentReport.content}
              isEditing={isEditingReport} onSave={handleSaveReport} onEdit={() => setIsEditingReport(!isEditingReport)} />
          </div>
        )}
      </div>
    </div>
  );
}
'@

# ---- src/app/api/auth/login/route.ts
$ApiAuthLogin = @'
import { NextRequest, NextResponse } from 'next/server';
import { getIronSession } from 'iron-session';
import { cookies } from 'next/headers';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();
    if (!email || !password) {
      return NextResponse.json({ error: 'Email and password required' }, { status: 400 });
    }

    if (email === 'demo@example.com' && password === 'demo') {
      let user = await prisma.user.findUnique({ where: { email: 'demo@example.com' } });
      if (!user) {
        user = await prisma.user.create({
          data: { email: 'demo@example.com', name: 'Demo User', passwordHash: await bcrypt.hash('demo', 10), role: 'ANALYST' },
        });
      }
      const session = await getIronSession(cookies(), {
        password: process.env.SESSION_SECRET || 'complex_password_at_least_32_characters_long',
        cookieName: 'ai-reporting-session',
      });
      (session as any).user = { id: (user as any).id, email: user.email, name: (user as any).name };
      await session.save();
      return NextResponse.json({ success: true, user: (session as any).user });
    }

    const user = await prisma.user.findUnique({ where: { email } });
    if (!user || !(user as any).passwordHash) {
      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 });
    }
    const isValid = await bcrypt.compare(password, (user as any).passwordHash);
    if (!isValid) {
      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 });
    }

    const session = await getIronSession(cookies(), {
      password: process.env.SESSION_SECRET || 'complex_password_at_least_32_characters_long',
      cookieName: 'ai-reporting-session',
    });
    (session as any).user = { id: (user as any).id, email: (user as any).email, name: (user as any).name };
    await session.save();
    return NextResponse.json({ success: true, user: (session as any).user });

  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json({ error: 'Login failed' }, { status: 500 });
  }
}
'@

# ---- src/app/api/auth/check/route.ts
$ApiAuthCheck = @'
import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';

export async function GET() {
  const session = await getSession();
  if ((session as any).user) {
    return NextResponse.json({ authenticated: true, user: (session as any).user });
  } else {
    return NextResponse.json({ authenticated: false }, { status: 401 });
  }
}
'@

# ---- src/app/api/auth/logout/route.ts
$ApiAuthLogout = @'
import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';

export async function POST() {
  const session = await getSession();
  (session as any).destroy?.();
  return NextResponse.json({ success: true });
}
'@

# ---- src/app/api/companies/route.ts
$ApiCompanies = @'
import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { prisma } from '@/lib/prisma';

export async function GET() {
  const session = await getSession();
  if (!(session as any).user) {
    return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
  }
  try {
    const companies = await prisma.company.findMany({
      where: { users: { some: { userId: (session as any).user.id } } },
      select: { id: true, name: true, industry: true, context: true },
    });

    if (companies.length === 0) {
      const demoCompany = await prisma.company.create({
        data: {
          name: 'Demo Company',
          industry: 'Technology',
          context: 'B2B SaaS',
          users: { create: { userId: (session as any).user.id, role: 'OWNER' } },
        },
      });
      (companies as any).push({ id: (demoCompany as any).id, name: demoCompany.name, industry: demoCompany.industry, context: demoCompany.context });
    }
    return NextResponse.json(companies);
  } catch (error) {
    console.error('Error fetching companies:', error);
    return NextResponse.json({ error: 'Failed to fetch companies' }, { status: 500 });
  }
}
'@

# ---- src/app/api/generate-report/route.ts
$ApiGenerateReport = @'
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  const session = await getSession();
  if (!(session as any).user) {
    return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
  }
  try {
    const formData = await request.formData();
    const query = formData.get('query') as string;
    const companyStr = formData.get('company') as string;
    const includeGraphs = formData.get('includeGraphs') === 'true';
    const chatHistoryStr = formData.get('chatHistory') as string;

    if (!query || !companyStr) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const company = JSON.parse(companyStr);
    const _chatHistory = chatHistoryStr ? JSON.parse(chatHistoryStr) : [];

    const mockContent = `
<h2>Monthly Marketing Report - ${company.name}</h2>
<p><strong>Report Date:</strong> ${new Date().toLocaleDateString()}</p>
<p><strong>Query:</strong> ${query}</p>
<h3>Executive Summary</h3>
<p>This month showed significant growth across all marketing channels with a 23% increase in overall engagement.</p>
<h3>Key Metrics</h3>
<ul>
  <li><strong>Website Traffic:</strong> 45,230 visits (+15% MoM)</li>
  <li><strong>Conversion Rate:</strong> 3.2% (+0.5% MoM)</li>
  <li><strong>Email Open Rate:</strong> 28% (+3% MoM)</li>
  <li><strong>Social Media Reach:</strong> 125,000 (+20% MoM)</li>
</ul>
<h3>Recommendations</h3>
<ol>
  <li>Increase investment in social media advertising</li>
  <li>Optimize email campaign timing</li>
  <li>Implement A/B testing for landing pages</li>
</ol>
`;

    let charts: any[] = [];
    if (includeGraphs) {
      charts = [{
        id: 'chart-1',
        type: 'bar',
        data: { labels: ['Jan', 'Feb', 'Mar', 'Apr'], datasets: [{ label: 'Traffic', data: [30000, 35000, 42000, 45230], backgroundColor: '#3B82F6' }] }
      }];
    }

    const report = await prisma.report.create({
      data: {
        content: mockContent,
        query: query,
        companyId: company.id,
        userId: (session as any).user.id,
        charts: charts.length > 0 ? JSON.stringify(charts) : null,
        status: 'PUBLISHED',
      },
    });

    return NextResponse.json({ content: mockContent, charts: charts, reportId: (report as any).id });

  } catch (error) {
    console.error('Report generation error:', error);
    return NextResponse.json({ error: 'Failed to generate report' }, { status: 500 });
  }
}
'@

# ---- src/app/api/parse-file/route.ts
$ApiParseFile = @'
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as unknown as File;

    if (!file) {
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }

    const meta = {
      name: (file as any).name || 'uploaded',
      type: (file as any).type || 'application/octet-stream',
      size: (file as any).size || 0
    };

    let preview = '';
    if (/^text\/|\/csv$/.test(meta.type) || /\.(txt|csv)$/i.test(meta.name)) {
      const buf = Buffer.from(await (file as any).arrayBuffer());
      preview = buf.toString('utf8').slice(0, 4000);
    }

    return NextResponse.json({ success: true, meta, preview });
  } catch (error) {
    console.error('Parse-file error:', error);
    return NextResponse.json({ error: 'Failed to parse file' }, { status: 500 });
  }
}
'@

# ---- src/lib/prisma.ts (stub)
$LibPrisma = @'
export const prisma = {
  user: {
    findUnique: async (_args: any) => null,
    create: async ({ data }: any) => ({ id: "user_demo", ...data }),
  },
  company: {
    findMany: async (_args: any) => [],
    create: async ({ data }: any) => ({ id: "company_demo", ...data }),
  },
  report: {
    create: async ({ data }: any) => ({ id: "report_demo", ...data }),
  },
} as any;
'@

# ---- src/lib/session.ts (simple in-memory session for demo)
$LibSession = @'
type SessionUser = { id: string; email: string; name?: string };
type DemoSession = { user: SessionUser | null; save: () => Promise<void>; destroy: () => void };

export async function getSession(): Promise<DemoSession> {
  const g = globalThis as any;
  if (!g.__demoSession) {
    g.__demoSession = {
      user: null,
      async save() {},
      destroy() { this.user = null; }
    } as DemoSession;
  }
  return g.__demoSession as DemoSession;
}
'@

# ---- src/store/chat-store.ts (minimal Zustand store)
$StoreChat = @'
import create from "zustand";

export type UploadedFile = { id: string; name: string; size: number; status: "uploading"|"ready"|"error"; progress?: number; error?: string };
export type Message = { id: string; type: "user"|"assistant"|"error"|"system"; content: string; timestamp: number; files?: UploadedFile[]; reportId?: string; charts?: any[] };
export type Company = { id: string; name: string; industry?: string; context?: string };
export type Report = { id: string; content: string; charts?: any[]; query?: string; timestamp?: number; editedContent?: string };

type ChatStore = {
  uploadedFiles: UploadedFile[];
  uploadFile: (f: File) => void;
  removeFile: (id: string) => void;
  messages: Message[];
  currentReport?: Report | null;
  selectedCompany?: Company | null;
  companies: Company[];
  isLoading: boolean;
  error?: string | null;
  isAuthenticated: boolean;
  setCompany: (c: Company) => void;
  sendMessage: (text: string, includeGraphs: boolean) => Promise<void>;
  clearChat: () => void;
  saveReport: (id: string, content: string) => Promise<void>;
  loadCompanies: () => Promise<void>;
  checkAuth: () => Promise<void>;
  setReport: (r: Report) => void;
  login: (email: string, password: string) => Promise<void>;
};

export const useChatStore = create<ChatStore>((set, get) => ({
  uploadedFiles: [],
  uploadFile: (f: File) => {
    const id = Math.random().toString(36).slice(2);
    set((s) => ({ uploadedFiles: [...s.uploadedFiles, { id, name: f.name, size: f.size, status: "ready" }] }));
  },
  removeFile: (id) => set((s) => ({ uploadedFiles: s.uploadedFiles.filter(x => x.id !== id) })),
  messages: [],
  currentReport: null,
  selectedCompany: null,
  companies: [],
  isLoading: false,
  error: null,
  isAuthenticated: false,
  setCompany: (c) => set({ selectedCompany: c }),
  setReport: (r) => set({ currentReport: r }),
  clearChat: () => set({ messages: [] }),
  checkAuth: async () => {
    try {
      const res = await fetch("/api/auth/check");
      set({ isAuthenticated: res.ok });
    } catch { set({ isAuthenticated: false }); }
  },
  login: async (email, password) => {
    set({ isLoading: true, error: null });
    try {
      const res = await fetch("/api/auth/login", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ email, password }) });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Login failed");
      set({ isAuthenticated: true });
    } catch (e: any) {
      set({ error: e.message });
    } finally {
      set({ isLoading: false });
    }
  },
  loadCompanies: async () => {
    try {
      const res = await fetch("/api/companies");
      if (!res.ok) return;
      const companies: Company[] = await res.json();
      set({ companies, selectedCompany: companies[0] ?? null });
    } catch {}
  },
  sendMessage: async (text, includeGraphs) => {
    const st = get();
    if (!st.selectedCompany) { set({ error: "Select a company first" }); return; }
    const ts = Date.now();
    const userMsg: Message = { id: "m_"+ts, type: "user", content: text, timestamp: ts };
    set((s) => ({ messages: [...s.messages, userMsg], isLoading: true, error: null }));
    const fd = new FormData();
    fd.append("query", text);
    fd.append("company", JSON.stringify(st.selectedCompany));
    fd.append("includeGraphs", includeGraphs ? "true" : "false");
    fd.append("chatHistory", JSON.stringify(s.messages));
    try {
      const res = await fetch("/api/generate-report", { method: "POST", body: fd });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to generate report");
      const aMsg: Message = { id: "a_"+Date.now(), type: "assistant", content: data.content, timestamp: Date.now(), reportId: data.reportId, charts: data.charts };
      set((s) => ({ messages: [...s.messages, aMsg] }));
    } catch (e: any) {
      const err: Message = { id: "e_"+Date.now(), type: "error", content: e.message, timestamp: Date.now() };
      set((s) => ({ messages: [...s.messages, err], error: e.message }));
    } finally {
      set({ isLoading: false });
    }
  },
  saveReport: async (_id, content) => {
    set((s) => ({ currentReport: s.currentReport ? { ...s.currentReport, editedContent: content } : null }));
  },
}));
'@

# ---- src/types/index.ts
$TypesIndex = @'
export type Report = {
  id: string;
  content: string;
  charts?: any[];
  query?: string;
  timestamp?: number;
  editedContent?: string;
};
'@

# ==========================================
# WRITE FILES
# ==========================================
Write-Host "Writing files..." -ForegroundColor Yellow

$ReportingChatbot | Out-File -FilePath "src\components\ReportingChatbot.tsx" -Encoding UTF8
$ApiAuthLogin     | Out-File -FilePath "src\app\api\auth\login\route.ts" -Encoding UTF8
$ApiAuthCheck     | Out-File -FilePath "src\app\api\auth\check\route.ts" -Encoding UTF8
$ApiAuthLogout    | Out-File -FilePath "src\app\api\auth\logout\route.ts" -Encoding UTF8
$ApiCompanies     | Out-File -FilePath "src\app\api\companies\route.ts" -Encoding UTF8
$ApiGenerateReport| Out-File -FilePath "src\app\api\generate-report\route.ts" -Encoding UTF8
$ApiParseFile     | Out-File -FilePath "src\app\api\parse-file\route.ts" -Encoding UTF8
$LibPrisma        | Out-File -FilePath "src\lib\prisma.ts" -Encoding UTF8
$LibSession       | Out-File -FilePath "src\lib\session.ts" -Encoding UTF8
$StoreChat        | Out-File -FilePath "src\store\chat-store.ts" -Encoding UTF8
$TypesIndex       | Out-File -FilePath "src\types\index.ts" -Encoding UTF8

Write-Host "Done. Files created." -ForegroundColor Green
