# AI Reporting Chatbot - Complete Project Structure

## 📁 Project Structure Overview

```
ai-reporting-chatbot/
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── auth/
│   │   │   │   ├── check/route.ts
│   │   │   │   ├── login/route.ts
│   │   │   │   └── logout/route.ts
│   │   │   ├── companies/route.ts
│   │   │   ├── generate-report/route.ts
│   │   │   ├── parse-file/route.ts
│   │   │   └── reports/[id]/route.ts
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   └── globals.css
│   ├── components/
│   │   ├── ReportingChatbot.tsx
│   │   ├── FileUploadZone.tsx
│   │   ├── ChartRenderer.tsx
│   │   ├── ReportEditor.tsx
│   │   ├── MessageList.tsx
│   │   └── CompanySelector.tsx
│   ├── lib/
│   │   ├── api-client.ts
│   │   ├── file-processor.ts
│   │   ├── prisma.ts
│   │   ├── session.ts
│   │   └── utils.ts
│   ├── store/
│   │   └── chat-store.ts
│   └── types/
│       └── index.ts
├── prisma/
│   └── schema.prisma
├── public/
│   └── favicon.ico
├── .env.local.example
├── .gitignore
├── next.config.js
├── package.json
├── tailwind.config.js
├── tsconfig.json
└── README.md
```

## 📄 File Contents

### **1. src/app/page.tsx**
```typescript
'use client';

import ReportingChatbot from '@/components/ReportingChatbot';

export default function Home() {
  return (
    <main className="h-screen">
      <ReportingChatbot />
    </main>
  );
}
```

### **2. src/app/layout.tsx**
```typescript
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'AI Report Generator',
  description: 'AI-powered reporting platform for marketers',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}
```

### **3. src/app/globals.css**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
  }
}

@layer components {
  .prose h1 { @apply text-3xl font-bold mb-4; }
  .prose h2 { @apply text-2xl font-bold mb-3; }
  .prose h3 { @apply text-xl font-bold mb-2; }
  .prose p { @apply mb-4; }
  .prose ul { @apply list-disc list-inside mb-4; }
  .prose ol { @apply list-decimal list-inside mb-4; }
  .prose strong { @apply font-bold; }
  .prose em { @apply italic; }
}
```

### **4. src/types/index.ts**
```typescript
export interface User {
  id: string;
  email: string;
  name?: string;
  role?: string;
}

export interface Message {
  id: string;
  type: 'user' | 'assistant' | 'system' | 'error';
  content: string;
  timestamp: Date;
  files?: ProcessedFile[];
  charts?: ChartSpec[];
  reportId?: string;
}

export interface ProcessedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  status: 'pending' | 'uploading' | 'processing' | 'ready' | 'error';
  progress?: number;
  content?: string;
  error?: string;
  rawFile?: File;
}

export interface Company {
  id: string;
  name: string;
  context?: string;
  industry?: string;
}

export interface ChartSpec {
  id: string;
  type: 'line' | 'bar' | 'pie' | 'doughnut';
  data: {
    labels: string[];
    datasets: Array<{
      label: string;
      data: number[];
      backgroundColor?: string | string[];
      borderColor?: string | string[];
    }>;
  };
  options?: any;
}

export interface Report {
  id: string;
  content: string;
  charts?: ChartSpec[];
  query: string;
  timestamp: Date;
  isEditing?: boolean;
  editedContent?: string;
}
```

### **5. src/lib/session.ts**
```typescript
import { SessionOptions } from 'iron-session';

export const sessionOptions: SessionOptions = {
  password: process.env.SESSION_SECRET || 'complex_password_at_least_32_characters_long',
  cookieName: 'ai-reporting-session',
  cookieOptions: {
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax',
    maxAge: 60 * 60 * 24 * 30,
    httpOnly: true,
  },
};

export interface SessionData {
  user?: {
    id: string;
    email: string;
    name?: string;
  };
}
```

### **6. src/lib/prisma.ts**
```typescript
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
```

### **7. package.json**
```json
{
  "name": "ai-reporting-chatbot",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "setup": "npm install && npx prisma generate && npx prisma db push",
    "prisma:generate": "prisma generate",
    "prisma:push": "prisma db push",
    "prisma:studio": "prisma studio"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.20.0",
    "@prisma/client": "^5.7.1",
    "@tiptap/react": "^2.1.13",
    "@tiptap/starter-kit": "^2.1.13",
    "@tiptap/extension-table": "^2.1.13",
    "@tiptap/extension-link": "^2.1.13",
    "@tiptap/extension-image": "^2.1.13",
    "@tiptap/extension-highlight": "^2.1.13",
    "@tiptap/extension-text-align": "^2.1.13",
    "bcryptjs": "^2.4.3",
    "chart.js": "^4.4.1",
    "formidable": "^3.5.1",
    "iron-session": "^8.0.1",
    "lucide-react": "^0.294.0",
    "mammoth": "^1.6.0",
    "next": "14.0.4",
    "papaparse": "^5.4.1",
    "pdf-parse": "^1.1.1",
    "react": "^18.2.0",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "xlsx": "^0.18.5",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/formidable": "^3.4.5",
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "prisma": "^5.7.1",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3"
  }
}
```

### **8. .env.local.example**
```bash
# Session secret (generate with: openssl rand -hex 32)
SESSION_SECRET=your_32_character_or_longer_secret_here

# Anthropic API Key (get from https://console.anthropic.com)
ANTHROPIC_API_KEY=sk-ant-api03-your-actual-key-here

# Database URL (SQLite for development)
DATABASE_URL=file:./dev.db

# For production with PostgreSQL:
# DATABASE_URL=postgresql://user:password@localhost:5432/ai_reporting?schema=public

# Application URL
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

### **9. prisma/schema.prisma**
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String?
  role         String        @default("ANALYST")
  companies    CompanyUser[]
  reports      Report[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Company {
  id        String        @id @default(cuid())
  name      String
  industry  String?
  context   String?
  users     CompanyUser[]
  reports   Report[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CompanyUser {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   @default("MEMBER")
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  joinedAt  DateTime @default(now())
  
  @@unique([userId, companyId])
}

model Report {
  id        String   @id @default(cuid())
  content   String
  query     String
  companyId String
  userId    String
  status    String   @default("DRAFT")
  version   Int      @default(1)
  charts    String?
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

### **10. README.md**
```markdown
# AI Reporting Chatbot

## 🚀 Quick Setup

1. **Install dependencies:**
```bash
npm install
```

2. **Setup environment:**
```bash
cp .env.local.example .env.local
# Edit .env.local with your API keys
```

3. **Setup database:**
```bash
npx prisma generate
npx prisma db push
```

4. **Run development server:**
```bash
npm run dev
```

5. **Login credentials:**
- Email: demo@example.com
- Password: demo

## 📦 Features
- AI-powered report generation with Claude 3
- File parsing (PDF, Word, Excel, CSV)
- Interactive charts
- WYSIWYG editor
- Multi-company support
- Secure authentication

## 🛠️ Tech Stack
- Next.js 14 (App Router)
- TypeScript
- Anthropic Claude API
- Prisma ORM
- TipTap Editor
- Chart.js
- Zustand
- Tailwind CSS
```

## 🎯 Installation Instructions

### **Method 1: Manual Setup**

1. Create a new Next.js project:
```bash
npx create-next-app@latest ai-reporting --typescript --tailwind --app
cd ai-reporting
```

2. Copy all files from the structure above into your project

3. Install dependencies:
```bash
npm install
```

4. Setup environment and database:
```bash
cp .env.local.example .env.local
npx prisma generate
npx prisma db push
```

5. Run the application:
```bash
npm run dev
```

### **Method 2: Using Git**

1. Initialize in your repository:
```bash
cd jam-sesh
git pull origin main
```

2. Copy all files to your repo and commit:
```bash
git add .
git commit -m "Add AI Reporting Chatbot"
git push origin main
```

## 📝 Important Notes

1. **API Keys Required:**
   - Get Anthropic API key from https://console.anthropic.com
   - Generate session secret with: `openssl rand -hex 32`

2. **Database:**
   - Default uses SQLite (file-based)
   - For production, switch to PostgreSQL

3. **File Structure:**
   - All source code goes in `src/` folder
   - API routes use Next.js 14 App Router format
   - Components are modular and reusable

4. **Authentication:**
   - Demo login provided
   - Production should use proper auth provider

This structure is fully functional and ready to use!